name: ci

on:
  push:
    branches:
      - automation/brawl/try/*
      - automation/brawl/merge/*

  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # By default, when a action is run against a PR it will use a merge commit from the target branch & the PR branch. We want to use just the PR branch.
  # So this changes the SHA to the PR branch SHA or falls back to the current SHA (if its not a PR)
  # https://github.com/actions/checkout/issues/426
  SHA: ${{ github.event.pull_request.head.sha || github.sha }}

defaults:
  run:
    shell: bash

jobs:
  matrix_prep:
    name: Matrix Prep
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.compute.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Run matrix prep
        run: .github/scripts/ci-matrix-prep.py '${{ toJson(github) }}' >> $GITHUB_OUTPUT
        id: compute

  clippy:
    name: Clippy
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix.clippy) }}
    runs-on: ${{ matrix.clippy.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup FFmpeg
        uses: ./.github/actions/setup-ffmpeg

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with: ${{ matrix.clippy.rust }}

      - name: Disable Hakari
        run: cargo hakari disable

      - name: Run Clippy
        if: ${{ !matrix.clippy.powerset }}
        run: cargo +${{ matrix.clippy.rust.toolchain }} clippy -Z unstable-options --all-features --all-targets --no-deps -- -Dwarnings

      - name: Run Clippy on Powerset
        if: ${{ matrix.clippy.powerset }}
        run: just powerset clippy -- --all-targets --no-deps -Z unstable-options -- -Dwarnings

  fmt:
    name: Fmt
    runs-on: ubuntu-24.04
    permissions:
      checks: write
    env:
      RUST_TOOLCHAIN: nightly
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt

      - name: Make sure code is formatted
        run: cargo +${{ env.RUST_TOOLCHAIN }} fmt --check

  hakari:
    name: Hakari
    runs-on: ubuntu-24.04
    env:
      RUST_TOOLCHAIN: nightly
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          tools: cargo-hakari

      - name: Make sure Hakari is up-to-date
        run: |
          set -xeo pipefail

          cargo +${{ env.RUST_TOOLCHAIN }} hakari manage-deps --dry-run
          cargo +${{ env.RUST_TOOLCHAIN }} hakari generate --diff
          cargo +${{ env.RUST_TOOLCHAIN }} hakari verify

  test:
    name: Test
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix.test) }}
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: "--cfg reqwest_unstable"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup FFmpeg
        uses: ./.github/actions/setup-ffmpeg

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with: ${{ matrix.test.rust }}

      # Note; we don't run the powerset here because it's very slow on CI
      # Perhaps we should consider it at some point.
      #
      # Coverage for doctests is currently broken in llvm-cov.
      # Once it fully works we can add the `--doctests` flag to the test and report command again.
      - name: Run tests
        run: |
          cargo +${{ matrix.test.rust.toolchain }} llvm-cov nextest --no-fail-fast --all-features --profile ci --no-report
          cargo +${{ matrix.test.rust.toolchain }} llvm-cov test --all-features --doc --no-report
          cargo +${{ matrix.test.rust.toolchain }} llvm-cov report --lcov --output-path ./lcov.info

      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ./lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          override_pr: ${{ matrix.test.pr_number }}
          override_commit: ${{ matrix.test.commit_sha }}
          verbose: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          files: ./target/nextest/ci/junit.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          override_pr: ${{ matrix.test.pr_number }}
          override_commit: ${{ matrix.test.commit_sha }}

  grind:
    name: Grind
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix.grind) }}
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: "--cfg reqwest_unstable --cfg valgrind"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup FFmpeg
        uses: ./.github/actions/setup-ffmpeg

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with: ${{ matrix.grind.rust }}

      - name: Install Valgrind
        run: |
          set -xeo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends valgrind

      - name: Run valgrind
        run: |
          set -xeo pipefail
          export CARGO_TARGET_${{ matrix.grind.target }}_RUNNER="${{ matrix.grind.valgrind }} --error-exitcode=1 --leak-check=full --gen-suppressions=all --suppressions=$(pwd)/valgrind-supressions/${{ matrix.grind.target }}.log"
          cargo +${{ matrix.grind.rust.toolchain }} nextest run --all-features --no-fail-fast --profile ci

  docs:
    name: ${{ matrix.full_name }}
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix.docs) }}
    runs-on: ${{ matrix.docs.os }}
    permissions:
      pull-requests: write
    env:
      RUSTDOCFLAGS: "-D warnings --cfg docsrs --enable-index-page -Zunstable-options"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup FFmpeg
        uses: ./.github/actions/setup-ffmpeg

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with: ${{ matrix.docs.rust }}

      - name: Build docs
        run: |
          set -xeo pipefail
          cargo +${{ matrix.docs.rust.toolchain }} doc --no-deps --all-features

      - name: Insert custom html for PR
        if: ${{ matrix.docs.pr_number }}
        run: .github/scripts/patch-docs.sh ${{ github.event.repository.html_url }} ${{ env.SHA }} ${{ matrix.docs.pr_number }}

      - name: Insert custom html for merge
        run: .github/scripts/patch-docs.sh ${{ github.event.repository.html_url }} ${{ env.SHA }}

      - name: Upload docs
        uses: actions/upload-artifact@v4
        if: ${{ matrix.docs.artifact_name }}
        with:
          name: ${{ matrix.docs.artifact_name }}
          path: target/doc

      - name: Deploy
        if: ${{ matrix.docs.deploy_docs }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_DOCS_API_KEY }}
          accountId: ${{ secrets.CF_DOCS_ACCOUNT_ID }}
          command: pages deploy --project-name=scuffle-docrs --branch=pr/${{ matrix.docs.pr_number }} --commit-hash=${{ env.SHA }} --commit-dirty=true ./target/doc

  brawl-done:
    runs-on: ubuntu-24.04
    needs: [hakari, test, clippy, fmt, grind, docs]
    if: ${{ !cancelled() && github.event_name == 'push' }}
    steps:
      - name: calculate the correct exit status
        run: jq --exit-status 'all(.result == "success" or .result == "skipped")' <<< '${{ toJson(needs) }}'
